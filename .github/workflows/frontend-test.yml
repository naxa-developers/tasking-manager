name: Frontend Test

on:
  workflow_call:
    inputs:
      runner-class:
        description: "Github Runner class to use"
        required: false
        type: string
        default: "ubuntu-latest"
      node-version:
        description: "Node version to use."
        required: false
        type: string
        default: "18.x"
      node-version-file:
        description: "Node version file to use. node-version overrides this parameter."
        required: false
        type: string
        default: ""
      context:
        description: "Root directory to start the build from."
        required: false
        type: string
        default: "."
      cache:
        description: "Use node modules installation caching. Default true."
        required: false
        type: boolean
        default: true
      cache-key-file:
        description: "Key file for cache."
        required: false
        type: string
        default: "${{ inputs.context }}/package.json"
      package-manager:
        description: "Package manager to use. Supports [npm, yarn]"
        required: false
        type: string
        default: "npm"
      test_frontend_command:
        description: "Testing command to run"
        required: true
        type: string
      test_frontend_build:
        description: "Perform a build test"
        required: false
        type: boolean
        default: true
      build_test_frontend_command:
        description: "Command to do build test on frontend"
        required: false
        type: string
      

jobs:
  frontend-test:
    runs-on: ${{ inputs.runner-class }}

    environment:
      name: ${{ github.ref_name }}

    outputs:
      artifact-name: ${{ steps.get_artifact_name.outputs.artifact_name }}

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: node_setup
        name: Install node 
        uses: actions/setup-node@v4
        #reference: https://github.com/actions/setup-node
        with:
          node-version: ${{ inputs.node-version }}
          node-version-file: ${{ inputs.node-version-file && inputs.node-version-file || '' }}

      - name: Cache Node packages
        uses: actions/cache@v3
        env:
          cache_name: node-${{ inputs.node-version || hashFiles(inputs.node-version-file)  }}-${{ inputs.package-manager }}-${{ hashFiles(inputs.cache-key-file) }}
        with:
          key: ${{ runner.os }}-build-${{ env.cache_name }}
          path: |
            ~/.npm
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache_name }}

      - id: node_packages_install
        name: Install node pacakges
        working-directory: ${{ inputs.context }}
        run: |
          case "${{ inputs.package-manager }}" in
          yarn)
            yarn
            ;;
          npm)
            npm i
            ;;
          esac

      - id: vars_and_secrets
        name: Vars and Secrets to Env file
        env:
          VARS_CONTEXT: ${{ toJson(vars) }}
          SECRETS_CONTEXT: ${{ toJson(secrets) }}
        shell: bash
        run: |
          parsed_vars=$(jq -n --argjson VARS_CONTEXT "$VARS_CONTEXT" --argjson SECRETS_CONTEXT "$SECRETS_CONTEXT" "$VARS_CONTEXT+$SECRETS_CONTEXT")
          to_envs() { jq -r "to_entries[] | \"\(.key)=\\\"\(.value)\\\"\n\""; }
          echo "$parsed_vars" | to_envs > ${{ inputs.context }}/.env

      - id: test_frontend
        name: Test Frontend
        working-directory: ${{ inputs.context }}
        run: |
          ${{ inputs.test_frontend_command }}
          
      - id: test_frontend_build
        name: Build Frontend
        if: ${{ inputs.test_frontend_build && inputs.build_test_frontend_command }}
        working-directory: ${{ inputs.context }}
        run: |
          ${{ inputs.build_test_frontend_command }}
  
